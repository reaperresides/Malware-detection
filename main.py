from typing import IO  
import streamlit as st
import numpy as np 
import joblib 
import os 

st.markdown('''
    <h1 style=color:red font-family:fantasy>
        Malware Detection
    </h1>
    ''',
    unsafe_allow_html=True
)


st.markdown(
    """
    <style>
    .reportview-container {
        background: url("https://cdn.pixabay.com/photo/2019/03/27/13/01/cyber-4084979_960_720.jpg")
    }
    </style>

    """,
    unsafe_allow_html=True
)



select_model_ = st.sidebar.selectbox('Select Model',('XgBoost','RandomForest','SVM'))
if select_model_=='XgBoost':
    path = r'models\xgboost_model_pipeline.pkl'
    model = joblib.load(path,'r')
    st.sidebar.write(f"{select_model_} model pipeline")
    st.sidebar.write('F1 Score : 0.9616')

elif select_model_=='RandomForest':
    path = r'models\RandomForest_model_pipeline.pkl'
    model = joblib.load(path,'r')
    st.sidebar.write(f"{select_model_} model pipeline")
    st.sidebar.write('F1 Score : 0.9696')

else :
    path = r'models\SVC_model_pipeline.pkl'
    model = joblib.load(path,'r')
    st.sidebar.write(f"{select_model_} model pipeline")
    st.sidebar.write('F1 Score : 0.9361')
input_features = ['Check Sum',
 'Minor Subsystem Version',
 'Major Image Version',
 'Major Linker Version',
 'Subsystem',
 'Minor Linker Version',
 'File Alignment',
 'Characteristics',
 'Size Of HeapCommit',
 'Size Of StackReserve',
 'Creation Year',
 'ImageBase',
 'Minor Operating System Version',
 'DllCharacteristics',
 'Size Of Initialized Data',
 'Size Of Stack Commit',
 'Major Subsystem Version',
 'Size Of HeapReserve',
 'Major Operating System Version',
 'Section Alignment']

inputs_ = []
count_ = 0

for i in range(10):
    try:
        cols = st.columns(3)

        col1 = cols[0].text_input(input_features[count_],key=count_)
        inputs_.append(col1)
        count_+=1

        col2 = cols[1].text_input(input_features[count_],key=count_)
        inputs_.append(col2)
        count_+=1

        col3 = cols[2].text_input(input_features[count_],key=count_)
        inputs_.append(col3)
        count_+=1
    except:
        pass



submit_ = st.button('Predict')
st.markdown('''
    <style>
    .css-1vgnld3{
        color:white
    }
    .css-1vgnld3 effi0qh0{
        color : black
    }
    </style>
    ''',unsafe_allow_html=True
)
if submit_:
    try:
        arr_ = np.array(inputs_,dtype='float32').reshape(1,-1)
        prediction = model.predict(arr_)
        if prediction[0] == 1:
            st.markdown('''
                <h2 style=color:red>Malware Detected!!!</h2>
            
                ''',unsafe_allow_html=True)
        else:
            st.markdown('''
                <h2 style=color:#2DE100>No Malware</h2>
            
                ''',unsafe_allow_html=True)
    except:
        st.markdown('''
                <h2 style=color:white>Please Check the input</h2>
            
                ''',unsafe_allow_html=True)
